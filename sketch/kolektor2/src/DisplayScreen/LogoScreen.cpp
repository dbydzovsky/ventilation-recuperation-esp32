#include "Arduino.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "ScreenFactory.h"
#include "TimeLib.h"
#define OLED_RESET 0
#include "../Dependencies/Dependencies.h"
#include "../Orchestrator/Orchestrator.h"


static const unsigned char PROGMEM logo48_glcd_bmp_0[] ={
0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
	0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 
	0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x7f, 0xf8, 0x00, 0x00, 0x1f, 0xc0, 0x7f, 0xf0, 0x00, 0x00, 0x3f, 0xe0, 0x3f, 0xf0, 0x00, 0x00, 
	0x7f, 0xe0, 0x3f, 0xe0, 0x00, 0x00, 0x7f, 0xf0, 0x1f, 0xf0, 0x7f, 0xf0, 0xff, 0xf8, 0x1f, 0xf9, 
	0xff, 0xf8, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xfe, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x7f, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0x1f, 0xff, 
	0x9f, 0xf8, 0x1f, 0xff, 0x0f, 0xfe, 0x0f, 0xf8, 0x0f, 0xfe, 0x00, 0x00, 0x07, 0xfc, 0x07, 0xfe, 
	0x00, 0x00, 0x0f, 0xfc, 0x07, 0xfc, 0x00, 0x00, 0x0f, 0xfe, 0x01, 0xf8, 0x00, 0x00, 0x1f, 0xfe, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 
	0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x01, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00
	};
static const unsigned char PROGMEM logo48_glcd_bmp_30[] ={
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x70, 
	0x00, 0x1f, 0xff, 0x00, 0x00, 0xfc, 0x00, 0x3f, 0xff, 0x80, 0x03, 0xfe, 0x00, 0x7f, 0xff, 0x80, 
	0x07, 0xff, 0x80, 0x7f, 0xff, 0xc0, 0x07, 0xff, 0x80, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0x80, 0xff, 
	0xff, 0xe0, 0x0f, 0xff, 0x81, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0x81, 0xff, 0xff, 0xc0, 0x3f, 0xff, 
	0x81, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0x81, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xc1, 0xff, 0xff, 0x00, 
	0x1f, 0xff, 0xe1, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xef, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x03, 0xff, 
	0xff, 0xfe, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x7e, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x3f, 0xf8, 0x00, 
	0x00, 0x1f, 0xfc, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x7f, 0xff, 
	0xff, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xf7, 0xff, 0xf8, 0x00, 0xff, 0xff, 0x87, 0xff, 0xf8, 
	0x00, 0xff, 0xff, 0x83, 0xff, 0xfc, 0x01, 0xff, 0xff, 0x81, 0xff, 0xfc, 0x03, 0xff, 0xff, 0x81, 
	0xff, 0xfc, 0x03, 0xff, 0xff, 0x81, 0xff, 0xf8, 0x07, 0xff, 0xff, 0x81, 0xff, 0xf0, 0x07, 0xff, 
	0xff, 0x01, 0xff, 0xf0, 0x07, 0xff, 0xff, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xfe, 0x00, 0xff, 0xe0, 
	0x01, 0xff, 0xfe, 0x00, 0x7f, 0xc0, 0x01, 0xff, 0xfc, 0x00, 0x3f, 0x00, 0x00, 0xff, 0xf8, 0x00, 
	0x0e, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
static const unsigned char PROGMEM logo48_glcd_bmp_60[] ={
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 
	0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x7f, 0xff, 0x80, 0x06, 0x00, 0x00, 0xff, 0xff, 0x00, 0x1f, 0xe0, 0x00, 0xff, 0xff, 0x00, 
	0x7f, 0xf0, 0x00, 0x7f, 0xfe, 0x01, 0xff, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xf8, 0x00, 0x3f, 
	0xfe, 0x07, 0xff, 0xfc, 0x00, 0x3f, 0xfe, 0x0f, 0xff, 0xfc, 0x00, 0x1f, 0xfe, 0x0f, 0xff, 0xfe, 
	0x00, 0x1f, 0xff, 0x9f, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
	0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7e, 0x7f, 0xff, 0xfe, 0x07, 0x80, 0xfc, 0x3f, 0x07, 0xf8, 
	0x1f, 0xe0, 0xfc, 0x3f, 0x01, 0xe0, 0x7f, 0xff, 0xfe, 0x7e, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xf9, 0xff, 0xf8, 0x00, 
	0x7f, 0xff, 0xf0, 0x7f, 0xf8, 0x00, 0x3f, 0xff, 0xf0, 0x7f, 0xfc, 0x00, 0x3f, 0xff, 0xe0, 0x7f, 
	0xfc, 0x00, 0x1f, 0xff, 0xc0, 0x7f, 0xfe, 0x00, 0x0f, 0xff, 0x80, 0x7f, 0xfe, 0x00, 0x0f, 0xfe, 
	0x00, 0xff, 0xff, 0x00, 0x07, 0xf8, 0x00, 0xff, 0xff, 0x00, 0x00, 0x60, 0x01, 0xff, 0xfe, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

	};


class LogoScreen: public Screen {
  private:
    int index = 0;
    bool finished = false;
  public:
    void setup(ScreenProps * deps){
      this->index = 0;
      this->finished = false;
    }
    bool isFinished(ScreenProps * deps) {
      return this->finished;
    }
    void finish() {
      this->finished = true;
    };
    void tick(ScreenProps * deps){ 
      deps->d->clearDisplay();
      if (this->index % 3 == 0) {
        deps->d->drawBitmap(6, 0, logo48_glcd_bmp_30, 48, 48, WHITE);
      } else if (this->index % 3 == 1) {
        deps->d->drawBitmap(6, 0, logo48_glcd_bmp_60, 48, 48, WHITE);
      } else {
        deps->d->drawBitmap(6, 0, logo48_glcd_bmp_0, 48, 48, WHITE);
      }
      if (this->index % 50 == 0) {
        deps->d->begin(SSD1306_SWITCHCAPVCC, 0x3C);
      }
      deps->d->display();
      this->index += 1;
    }
    bool canBeDimmed(ScreenProps * deps) {
      return false;
    }
    bool shouldShowScreenSaver(ScreenProps * deps) {
      return false;
    }
    int getDelayMs(ScreenProps * deps) {
      return 100;
    }
    bool handleClick(ScreenProps * deps, byte times){
      return false;
    }
    bool handleHold(ScreenProps * deps, int duration_ms, bool finished){
      return false;
    }
    void onPressDown(ScreenProps * deps) {

    }

    bool hasActiveButton() {
      return false;
    }
};
